import {
  CommonActions,
<<<<<<< Updated upstream
  getActionFromState,
  getPathFromState,
  getStateFromPath,
  type NavigationHelpers,
  NavigationHelpersContext,
  type NavigationProp,
  type ParamListBase,
=======
  findFocusedRoute,
  getActionFromState,
  getPathFromState,
  getStateFromPath,
  NavigationHelpersContext,
  NavigationRouteContext,
  useStateForPath,
>>>>>>> Stashed changes
} from '@react-navigation/core';
import * as React from 'react';

import { LinkingContext } from './LinkingContext';

<<<<<<< Updated upstream
type NavigationObject =
  | NavigationHelpers<ParamListBase>
  | NavigationProp<ParamListBase>;

type MinimalState = {
  index: number;
  routes: { name: string; params?: object; state?: MinimalState }[];
};

const getRootStateForNavigate = (
  navigation: NavigationObject,
  state: MinimalState
): MinimalState => {
  const parent = navigation.getParent();

  if (parent) {
    const parentState = parent.getState();

    return getRootStateForNavigate(parent, {
      index: 0,
      routes: [
        {
          ...parentState.routes[parentState.index],
          state: state,
        },
      ],
    });
  }

  return state;
=======
type MinimalState = {
  routes: [{ name: string; params?: object; state?: MinimalState }];
>>>>>>> Stashed changes
};

/**
 * Helpers to build href or action based on the linking options.
<<<<<<< Updated upstream
=======
 *
>>>>>>> Stashed changes
 * @returns `buildHref` to build an `href` for screen and `buildAction` to build an action from an `href`.
 */
export function useLinkBuilder() {
  const navigation = React.useContext(NavigationHelpersContext);
<<<<<<< Updated upstream
  const linking = React.useContext(LinkingContext);

  const buildHref = React.useCallback(
    (name: string, params?: object) => {
      const { options } = linking;

=======
  const route = React.useContext(NavigationRouteContext);

  const { options } = React.useContext(LinkingContext);

  const focusedRouteState = useStateForPath();

  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;
  const getStateFromPathHelper = options?.getStateFromPath ?? getStateFromPath;
  const getActionFromStateHelper =
    options?.getActionFromState ?? getActionFromState;

  const buildHref = React.useCallback(
    (name: string, params?: object) => {
>>>>>>> Stashed changes
      if (options?.enabled === false) {
        return undefined;
      }

<<<<<<< Updated upstream
      const state = navigation
        ? getRootStateForNavigate(navigation, {
            index: 0,
            routes: [{ name, params }],
          })
        : // If we couldn't find a navigation object in context, we're at root
          // So we'll construct a basic state object to use
          {
            index: 0,
            routes: [{ name, params }],
          };

      const path = options?.getPathFromState
        ? options.getPathFromState(state, options?.config)
        : getPathFromState(state, options?.config);

      return path;
    },
    [linking, navigation]
=======
      // Check that we're inside:
      // - navigator's context
      // - route context of the navigator (could be a screen, tab, etc.)
      // - route matches the state for path (from the screen's context)
      // This ensures that we're inside a screen
      const isScreen =
        navigation && route?.key && focusedRouteState
          ? route.key === findFocusedRoute(focusedRouteState)?.key &&
            navigation.getState().routes.some((r) => r.key === route.key)
          : false;

      const stateForRoute: MinimalState = {
        routes: [{ name, params }],
      };

      const constructState = (
        state: MinimalState | undefined
      ): MinimalState => {
        if (state) {
          const route = state.routes[0];

          // If we're inside a screen and at the innermost route
          // We need to replace the state with the provided one
          // This assumes that we're navigating to a sibling route
          if (isScreen && !route.state) {
            return stateForRoute;
          }

          // Otherwise, dive into the nested state of the route
          return {
            routes: [
              {
                ...route,
                state: constructState(route.state),
              },
            ],
          };
        }

        // Once there is no more nested state, we're at the innermost route
        // We can add a state based on provided parameters
        // This assumes that we're navigating to a child of this route
        // In this case, the helper is used in a navigator for its routes
        return stateForRoute;
      };

      const state = constructState(focusedRouteState);
      const path = getPathFromStateHelper(state, options?.config);

      return path;
    },
    [
      options?.enabled,
      options?.config,
      route?.key,
      navigation,
      focusedRouteState,
      getPathFromStateHelper,
    ]
>>>>>>> Stashed changes
  );

  const buildAction = React.useCallback(
    (href: string) => {
      if (!href.startsWith('/')) {
        throw new Error(`The href must start with '/' (${href}).`);
      }

<<<<<<< Updated upstream
      const { options } = linking;

      const state = options?.getStateFromPath
        ? options.getStateFromPath(href, options.config)
        : getStateFromPath(href, options?.config);

      if (state) {
        const action = getActionFromState(state, options?.config);
=======
      const state = getStateFromPathHelper(href, options?.config);

      if (state) {
        const action = getActionFromStateHelper(state, options?.config);
>>>>>>> Stashed changes

        return action ?? CommonActions.reset(state);
      } else {
        throw new Error('Failed to parse the href to a navigation state.');
      }
    },
<<<<<<< Updated upstream
    [linking]
=======
    [options?.config, getStateFromPathHelper, getActionFromStateHelper]
>>>>>>> Stashed changes
  );

  return {
    buildHref,
    buildAction,
  };
}
