/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const TupleSet = require("./TupleSet");

/**
<<<<<<< Updated upstream
 * @template {any[]} T
 */
class TupleQueue {
	/**
	 * @param {Iterable<T>=} items The initial elements.
=======
 * @template T
 * @template V
 */
class TupleQueue {
	/**
	 * @param {Iterable<[T, V]>=} items The initial elements.
>>>>>>> Stashed changes
	 */
	constructor(items) {
		/**
		 * @private
<<<<<<< Updated upstream
		 * @type {TupleSet<T>}
=======
		 * @type {TupleSet<[T, V]>}
>>>>>>> Stashed changes
		 */
		this._set = new TupleSet(items);
		/**
		 * @private
<<<<<<< Updated upstream
		 * @type {Iterator<T>}
=======
		 * @type {Iterator<[T, V]>}
>>>>>>> Stashed changes
		 */
		this._iterator = this._set[Symbol.iterator]();
	}

	/**
	 * Returns the number of elements in this queue.
	 * @returns {number} The number of elements in this queue.
	 */
	get length() {
		return this._set.size;
	}

	/**
	 * Appends the specified element to this queue.
<<<<<<< Updated upstream
	 * @param {T} item The element to add.
=======
	 * @param {[T, V]} item The element to add.
>>>>>>> Stashed changes
	 * @returns {void}
	 */
	enqueue(...item) {
		this._set.add(...item);
	}

	/**
	 * Retrieves and removes the head of this queue.
<<<<<<< Updated upstream
	 * @returns {T | undefined} The head of the queue of `undefined` if this queue is empty.
=======
	 * @returns {[T, V] | undefined} The head of the queue of `undefined` if this queue is empty.
>>>>>>> Stashed changes
	 */
	dequeue() {
		const result = this._iterator.next();
		if (result.done) {
			if (this._set.size > 0) {
				this._iterator = this._set[Symbol.iterator]();
<<<<<<< Updated upstream
				const value = this._iterator.next().value;
=======
				const value = /** @type {[T, V]} */ (this._iterator.next().value);
>>>>>>> Stashed changes
				this._set.delete(...value);
				return value;
			}
			return;
		}
<<<<<<< Updated upstream
		this._set.delete(...result.value);
=======
		this._set.delete(.../** @type {[T, V]} */ (result.value));
>>>>>>> Stashed changes
		return result.value;
	}
}

module.exports = TupleQueue;
